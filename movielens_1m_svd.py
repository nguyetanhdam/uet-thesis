# -*- coding: utf-8 -*-
"""MovieLens-1M_SVD

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nSNEy1dPisiO4abRpFPTHGTGyNf7XVT1
"""

!pip install tabml

# !pip install tensorflow
# !pip install surprise
# !pip install scikit-learn
# !pip install pyfm

!pip install scikit-surprise

"""# Import"""

import matplotlib
import pandas as pd
import seaborn as sns
import tensorflow as tf
import random as rd
import multiprocessing
import heapq
import scipy.sparse as sp
from matplotlib import pyplot as plt
from collections import OrderedDict
import numpy as np
from sklearn.metrics import roc_auc_score
from time import time

print("numpy ==", np.__version__)
print("matplotlib ==", matplotlib.__version__)
print("seaborn ==", sns.__version__)

"""# Data"""

import tabml.datasets
df_dict = tabml.datasets.download_movielen_1m()
df_dict.keys()

users = df_dict['users']
movies = df_dict['movies']
ratings = df_dict['ratings']

"""# SVD Model

## Khởi tạo và huấn luyện mô hình
"""

from surprise import SVD, Dataset, Reader
from surprise.model_selection import train_test_split
from surprise import accuracy

reader = Reader(rating_scale=(1, 5))
data = Dataset.load_from_df(ratings[['UserID', 'MovieID', 'Rating']], reader)

trainset, testset = train_test_split(data, test_size=0.2)

svd = SVD()
svd.fit(trainset)

predictions = svd.test(testset)
accuracy.rmse(predictions)

from sklearn.metrics import roc_auc_score, f1_score
import numpy as np

y_true = np.where(pred_df['rui'] >= 3.5, 1, 0)
y_pred = pred_df['est']

auc = roc_auc_score(y_true, y_pred)
print(f"AUC: {auc}")

y_pred_binary = np.where(y_pred >= 3.5, 1, 0)
f1 = f1_score(y_true, y_pred_binary)
print(f"F1 Score: {f1}")

"""## Show top 10 movies for user"""

all_movie_ids = movies['MovieID'].unique()

user_id = 1

# predict rating for all movies to this user_id = 1
user_ratings = []
for movie_id in all_movie_ids:
    user_ratings.append((movie_id, svd.predict(user_id, movie_id).est))

user_ratings.sort(key=lambda x: x[1], reverse=True)

top_10_movies = user_ratings[:10]
for movie_id, rating in top_10_movies:
    movie_title = movies[movies['MovieID'] == movie_id]['Title'].values[0]
    print(f"Movie: {movie_title}, Predicted Rating: {rating}")